// Author: Daniele Giardini - http://www.demigiant.com
// Created: 2019/04/12

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEditor;
using UnityEngine;

namespace DG.DemiEditor
{
    // Uses code from ChevyRay on TIGForums
    // https://forums.tigsource.com/index.php?topic=32178.0
    public static class DeEditorCoroutines
    {
        static readonly List<IEnumerator> _Coroutines = new List<IEnumerator>();

        #region Public Methods

        /// <summary>
        /// Starts an editor coroutine. You can't use normal <code>yield new WaitFor</code> methods because
        /// those are Unity runtime, but you can instead use <see cref="DeEditorCoroutines.WaitForSeconds"/>.
        /// Other than that, you can use normal <code>yield null/etc</code>.<para/>
        /// Returns an <see cref="IEnumerator"/> (which you can use with <see cref="StopCoroutine"/> to cancel the coroutine),
        /// or NULL in case the coroutine completed immediately.
        /// </summary>
        public static IEnumerator StartCoroutine(IEnumerator coroutine)
        {
            if (UpdateCoroutine(coroutine)) return null; // Completed immediately

            _Coroutines.Add(coroutine);
            if (_Coroutines.Count == 1) EditorApplication.update += UpdateCoroutines;
            return coroutine;

            // _Coroutines.Add(coroutine);
            // if (_Coroutines.Count == 1) EditorApplication.update += UpdateCoroutines;
            // return coroutine;
        }

        /// <summary>
        /// Stops the given coroutine generated by <see cref="StartCoroutine"/>
        /// </summary>
        public static void StopCoroutine(IEnumerator coroutine)
        {
            if (coroutine == null) return;

            bool changed = false;
            for (int i = 0; i < _Coroutines.Count; ++i) {
                if (_Coroutines[i] != coroutine) continue;
                changed = true;
                _Coroutines.RemoveAt(i);
                break;
            }
            if (changed && _Coroutines.Count == 0) EditorApplication.update -= UpdateCoroutines;
        }

        /// <summary>
        /// To be used inside a coroutine as a yield instruction: waits for the given seconds
        /// (replaces Unity's <code>yield new WaitForSeconds</code> because it's not available in-editor).<para/>
        /// Example usage:<para/>
        /// <code>yield return DeEditorCoroutines.WaitForSeconds(1);</code>
        /// </summary>
        public static IEnumerator WaitForSeconds(float seconds)
        {
            Stopwatch watch = Stopwatch.StartNew();
            while (watch.Elapsed.TotalSeconds < seconds) yield return 0;
        }

        #endregion

        #region Methods

        static void UpdateCoroutines()
        {
            // for (int i = 0; i < _Coroutines.Count; ++i) {
            //     if (_Coroutines[i].Current is IEnumerator) {
            //         if (MoveNext((IEnumerator)_Coroutines[i].Current)) continue;
            //     }
            //     if (!_Coroutines[i].MoveNext()) _Coroutines.RemoveAt(i--);
            // }
            //
            // if (_Coroutines.Count == 0) EditorApplication.update -= UpdateCoroutines;

            for (int i = 0; i < _Coroutines.Count; ++i) {
                if (UpdateCoroutine(_Coroutines[i])) _Coroutines.RemoveAt(i--);
            }
            if (_Coroutines.Count == 0) EditorApplication.update -= UpdateCoroutines;
        }

        // Returns TRUE if the coroutine was completed
        static bool UpdateCoroutine(IEnumerator coroutine)
        {
            if (coroutine.Current is IEnumerator) {
                if (MoveNext((IEnumerator)coroutine.Current)) return false;
            }
            return !coroutine.MoveNext();
        }

        static bool MoveNext(IEnumerator coroutine)
        {
            IEnumerator current = coroutine.Current as IEnumerator;
            if (current != null) {
                if (MoveNext(current)) return true;
            }
            return coroutine.MoveNext();
        }

        #endregion
    }
}